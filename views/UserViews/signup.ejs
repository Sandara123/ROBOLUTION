<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="/images/ROBOLUTION_ICON.ico" type="image/x-icon">
  <title>Sign Up - Robolution</title>
  <style>
    :root {
      --navy: #1a3a5f;
      --navy-light: #2c5282;
      --white: #ffffff;
      --light-gray: #f8f9fa;
      --border-color: #e2e8f0;
      --success: #28a745;
      --danger: #dc3545;
      --warning: #ffc107;
    }
    
    body {
      font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
      background-color: var(--light-gray);
      margin: 0;
      padding: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
      color: #333;
    }
    
    .signup-container {
      background-color: var(--white);
      border-radius: 12px;
      box-shadow: 0 10px 25px rgba(26, 58, 95, 0.1);
      padding: 35px;
      width: 420px;
      max-width: 90%;
    }
    
    .logo-container {
      text-align: center;
      margin-bottom: 25px;
    }
    
    .logo {
      max-width: 150px;
      height: auto;
    }
    
    h1 {
      text-align: center;
      color: var(--navy);
      margin-bottom: 25px;
      font-weight: 600;
    }
    
    .form-group {
      margin-bottom: 20px;
    }
    
    label {
      display: block;
      margin-bottom: 8px;
      color: var(--navy);
      font-weight: 500;
    }
    
    input {
      width: 100%;
      padding: 12px;
      border: 1px solid var(--border-color);
      border-radius: 6px;
      box-sizing: border-box;
      transition: border-color 0.3s;
    }
    
    input:focus {
      outline: none;
      border-color: var(--navy-light);
      box-shadow: 0 0 0 2px rgba(26, 58, 95, 0.1);
    }
    
    button {
      background-color: var(--navy);
      color: var(--white);
      border: none;
      padding: 14px;
      width: 100%;
      border-radius: 6px;
      cursor: pointer;
      font-size: 16px;
      font-weight: 600;
      margin-top: 15px;
      transition: background-color 0.3s;
    }
    
    button:hover {
      background-color: var(--navy-light);
    }
    
    .login-link {
      text-align: center;
      margin-top: 25px;
      color: #555;
    }
    
    .login-link a {
      color: var(--navy);
      text-decoration: none;
      font-weight: 500;
    }
    
    .login-link a:hover {
      text-decoration: underline;
    }
    
    .error-message {
      color: #e53e3e;
      margin-bottom: 20px;
      text-align: center;
      background-color: #fff5f5;
      padding: 10px;
      border-radius: 6px;
      border-left: 4px solid #e53e3e;
    }
    
    /* Password strength meter */
    .password-strength-meter {
      height: 6px;
      background-color: #eee;
      margin-top: 10px;
      border-radius: 3px;
      position: relative;
      overflow: hidden;
    }
    
    .password-strength-meter-bar {
      height: 100%;
      border-radius: 3px;
      transition: width 0.3s ease-in-out, background-color 0.3s ease-in-out;
      width: 0%;
    }
    
    .strength-text {
      font-size: 12px;
      margin-top: 5px;
      font-weight: 500;
      transition: color 0.3s;
    }
    
    .password-requirements {
      margin-top: 15px;
      padding: 10px;
      background-color: var(--light-gray);
      border-radius: 6px;
    }
    
    .requirement {
      display: flex;
      align-items: center;
      margin-bottom: 5px;
      font-size: 12px;
      color: #666;
    }
    
    .requirement i {
      margin-right: 8px;
      font-size: 14px;
      width: 16px;
      text-align: center;
    }
    
    .requirement.met {
      color: var(--success);
    }
    
    .requirement.unmet {
      color: var(--danger);
    }
    
    .toggle-password {
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      background: none;
      border: none;
      cursor: pointer;
      color: #999;
      font-size: 14px;
      padding: 0;
      width: auto;
      margin-top: 0;
    }
    
    .password-container {
      position: relative;
    }
    
    /* For the icons */
    .requirement i.fa-check {
      color: var(--success);
    }
    
    .requirement i.fa-times {
      color: var(--danger);
    }
    
    .username-status {
      font-size: 0.9rem;
      margin-top: 5px;
      display: none;
    }
    
    .username-status.available {
      color: #28a745;
    }
    
    .username-status.unavailable {
      color: #dc3545;
    }
    
    .username-input {
      position: relative;
    }
    
    .username-spinner {
      display: none;
      width: 20px;
      height: 20px;
      border: 2px solid #f3f3f3;
      border-top: 2px solid #3498db;
      border-radius: 50%;
      position: absolute;
      right: 10px;
      top: 50%;
      transform: translateY(-50%);
      animation: spin 1s linear infinite;
    }
    
    @keyframes spin {
      0% { transform: translateY(-50%) rotate(0deg); }
      100% { transform: translateY(-50%) rotate(360deg); }
    }
  </style>
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
</head>
<body>
  <div class="signup-container">
    <div class="logo-container">
      <img src="/images/LOGO.webp" alt="Robolution Logo" class="logo">
    </div>
    
    <h1>Create an Account</h1>
    
    <% if (typeof error !== 'undefined') { %>
      <div class="error-message"><%= error %></div>
    <% } %>
    
    <form action="/signup" method="POST" id="signupForm" class="signup-form">
      <div class="form-group">
        <label for="fullName">Full Name</label>
        <input type="text" id="fullName" name="fullName" value="<%= typeof formData !== 'undefined' ? formData.fullName : '' %>" required>
      </div>
      
      <div class="form-group">
        <label for="username">Username</label>
        <div class="username-input">
          <input type="text" id="username" name="username" value="<%= typeof formData !== 'undefined' ? formData.username : '' %>" required>
          <div class="username-spinner"></div>
        </div>
        <div class="username-status"></div>
      </div>
      
      <div class="form-group">
        <label for="email">Email Address</label>
        <input type="email" id="email" name="email" value="<%= typeof formData !== 'undefined' ? formData.email : '' %>" required>
      </div>
      
      <div class="form-group">
        <label for="password">Password</label>
        <div class="password-container">
          <input type="password" id="password" name="password" required>
          <button type="button" class="toggle-password">
            <i class="far fa-eye"></i>
          </button>
        </div>
        <div class="password-strength-meter">
          <div class="password-strength-meter-bar"></div>
        </div>
        <div class="strength-text">Password strength</div>
        
        <div class="password-requirements">
          <div class="requirement" id="length-req">
            <i class="fas fa-times"></i> At least 12 characters
          </div>
          <div class="requirement" id="uppercase-req">
            <i class="fas fa-times"></i> At least one uppercase letter
          </div>
          <div class="requirement" id="lowercase-req">
            <i class="fas fa-times"></i> At least one lowercase letter
          </div>
          <div class="requirement" id="number-req">
            <i class="fas fa-times"></i> At least one number
          </div>
          <div class="requirement" id="special-req">
            <i class="fas fa-times"></i> At least one special character
          </div>
        </div>
      </div>
      
      <div class="form-group">
        <label for="confirmPassword">Confirm Password</label>
        <div class="password-container">
          <input type="password" id="confirmPassword" name="confirmPassword" required>
          <button type="button" class="toggle-password">
            <i class="far fa-eye"></i>
          </button>
        </div>
        <div class="requirement" id="match-req" style="margin-top: 5px;">
          <i class="fas fa-times"></i> Passwords match
        </div>
      </div>
      
      <button type="submit" id="submitBtn">Sign Up</button>
    </form>
    
    <div class="login-link">
      Already have an account? <a href="/login">Log in</a>
    </div>
  </div>

  <script>
    document.addEventListener('DOMContentLoaded', function() {
      const passwordInput = document.getElementById('password');
      const confirmPasswordInput = document.getElementById('confirmPassword');
      const strengthMeter = document.querySelector('.password-strength-meter-bar');
      const strengthText = document.querySelector('.strength-text');
      const submitBtn = document.getElementById('submitBtn');
      const togglePasswordButtons = document.querySelectorAll('.toggle-password');
      
      // Requirements
      const lengthReq = document.getElementById('length-req');
      const uppercaseReq = document.getElementById('uppercase-req');
      const lowercaseReq = document.getElementById('lowercase-req');
      const numberReq = document.getElementById('number-req');
      const specialReq = document.getElementById('special-req');
      const matchReq = document.getElementById('match-req');
      
      // Toggle password visibility
      togglePasswordButtons.forEach(button => {
        button.addEventListener('click', function() {
          const input = this.previousElementSibling;
          const type = input.getAttribute('type') === 'password' ? 'text' : 'password';
          input.setAttribute('type', type);
          this.innerHTML = type === 'password' ? '<i class="far fa-eye"></i>' : '<i class="far fa-eye-slash"></i>';
        });
      });
      
      function updatePasswordStrength(password) {
        // Check requirements
        const hasLength = password.length >= 12;
        const hasUppercase = /[A-Z]/.test(password);
        const hasLowercase = /[a-z]/.test(password);
        const hasNumber = /[0-9]/.test(password);
        const hasSpecial = /[^A-Za-z0-9]/.test(password);
        
        // Update requirement indicators
        updateRequirement(lengthReq, hasLength);
        updateRequirement(uppercaseReq, hasUppercase);
        updateRequirement(lowercaseReq, hasLowercase);
        updateRequirement(numberReq, hasNumber);
        updateRequirement(specialReq, hasSpecial);
        
        // Calculate strength
        let strength = 0;
        if (password.length > 0) strength += 20;
        if (hasLength) strength += 20;
        if (hasUppercase) strength += 20;
        if (hasLowercase) strength += 20;
        if (hasNumber) strength += 10;
        if (hasSpecial) strength += 10;
        
        // Update meter
        strengthMeter.style.width = strength + '%';
        
        // Set color based on strength
        if (strength < 40) {
          strengthMeter.style.backgroundColor = '#dc3545';
          strengthText.textContent = 'Weak';
          strengthText.style.color = '#dc3545';
        } else if (strength < 70) {
          strengthMeter.style.backgroundColor = '#ffc107';
          strengthText.textContent = 'Moderate';
          strengthText.style.color = '#ffc107';
        } else {
          strengthMeter.style.backgroundColor = '#28a745';
          strengthText.textContent = 'Strong';
          strengthText.style.color = '#28a745';
        }
        
        // All requirements met?
        return hasLength && hasUppercase && hasLowercase && hasNumber && hasSpecial;
      }
      
      function updateRequirement(element, isMet) {
        if (isMet) {
          element.classList.add('met');
          element.classList.remove('unmet');
          element.querySelector('i').className = 'fas fa-check';
        } else {
          element.classList.add('unmet');
          element.classList.remove('met');
          element.querySelector('i').className = 'fas fa-times';
        }
      }
      
      passwordInput.addEventListener('input', function() {
        updatePasswordStrength(this.value);
        
        // Check if passwords match
        if (confirmPasswordInput.value.length > 0) {
          const match = this.value === confirmPasswordInput.value;
          updateRequirement(matchReq, match);
        }
      });
      
      confirmPasswordInput.addEventListener('input', function() {
        const match = this.value === passwordInput.value;
        updateRequirement(matchReq, match);
      });
      
      // Form submission
      document.getElementById('signupForm').addEventListener('submit', function(e) {
        const passwordStrong = updatePasswordStrength(passwordInput.value);
        const passwordsMatch = passwordInput.value === confirmPasswordInput.value;
        
        if (!passwordStrong || !passwordsMatch) {
          e.preventDefault();
          alert('Please ensure your password meets all requirements and both passwords match');
        }
      });
    });

    let usernameTimer;
    const usernameInput = document.getElementById('username');
    const usernameStatus = document.querySelector('.username-status');
    const usernameSpinner = document.querySelector('.username-spinner');
    const form = document.getElementById('signupForm');

    usernameInput.addEventListener('input', function() {
      const username = this.value.trim();
      
      // Clear previous timer
      clearTimeout(usernameTimer);
      
      // Hide previous status
      usernameStatus.style.display = 'none';
      
      if (username.length < 3) {
        return;
      }

      // Show spinner
      usernameSpinner.style.display = 'block';
      
      // Set new timer for 500ms debounce
      usernameTimer = setTimeout(async () => {
        try {
          // Check user collection
          const userResponse = await fetch(`/api/check-username?username=${encodeURIComponent(username)}`);
          const userData = await userResponse.json();
          
          // Check admin collection
          const adminResponse = await fetch(`/api/check-admin-username?username=${encodeURIComponent(username)}`);
          const adminData = await adminResponse.json();
          
          // Username is available only if it doesn't exist in either collection
          const isAvailable = userData.available && adminData.available;
          
          // Hide spinner
          usernameSpinner.style.display = 'none';
          
          // Show status
          usernameStatus.style.display = 'block';
          if (isAvailable) {
            usernameStatus.textContent = '✓ Username is available';
            usernameStatus.className = 'username-status available';
          } else {
            usernameStatus.textContent = '✕ Username is already taken';
            usernameStatus.className = 'username-status unavailable';
          }
        } catch (error) {
          console.error('Error checking username:', error);
          usernameSpinner.style.display = 'none';
        }
      }, 500);
    });

    // Prevent form submission if username is taken
    form.addEventListener('submit', async function(e) {
      const username = usernameInput.value.trim();
      
      try {
        // Check both user and admin collections
        const userResponse = await fetch(`/api/check-username?username=${encodeURIComponent(username)}`);
        const userData = await userResponse.json();
        
        const adminResponse = await fetch(`/api/check-admin-username?username=${encodeURIComponent(username)}`);
        const adminData = await adminResponse.json();
        
        const isAvailable = userData.available && adminData.available;
        
        if (!isAvailable) {
          e.preventDefault();
          alert('Please choose a different username - this one is already taken.');
        }
      } catch (error) {
        console.error('Error checking username:', error);
      }
    });
  </script>
</body>
</html>
