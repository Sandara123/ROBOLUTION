<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <link rel="shortcut icon" href="/images/ROBOLUTION_ICON.ico" type="image/x-icon">
  <meta name="description" content="Erovoutika is a leading provider of innovative robotics and automation solutions for businesses worldwide. Our expert team of engineers and designers create ...">
  <title>Robolution Blog</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/responsive.css">
  <script src="/js/script.js" defer></script>
  <script src="/js/mobile.js" defer></script>
  <!-- Add Font Awesome for icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    /* Background color change */
    body, main {
      background-color: #ffffff;
      background-image: none;
    }
    
    /* Post grid styling */
    .posts-grid {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 40px;
      padding: 30px 20px;
      max-width: 1440px;
      margin: 0 auto;
    }
    
    /* Initial button visibility */
    .login-button, .signup-button {
      display: inline-block;
    }
    
    .logout-button {
      display: none;
    }
    
    /* Sign-up button styles */
    .signup-button {
      background-color: #4CAF50;
      color: white;
      border: none;
    }
    
    .signup-button:hover {
      background-color: #45a049;
    }
    
    /* Logout button styles */
    .logout-button {
      background-color: #f44336;
      color: white;
      border: none;
    }
    
    .logout-button:hover {
      background-color: #d32f2f;
    }
    
    /* Updated card styling */
    .post-card {
      position: relative;
      height: 380px;
      background: transparent;
      padding: 0;
      border-radius: 8px;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      overflow: hidden;
      transition: transform 0.3s ease, box-shadow 0.3s ease;
      display: block;
      width: 100%;
    }
    
    .post-card:hover {
      transform: translateY(-8px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    /* Image styling */
    .post-img {
      width: 100%;
      height: 100%;
      object-fit: fit;
      border-radius: 0;
      margin: 0;
      transition: filter 0.3s ease;
    }
    
    /* Hover effect */
    .post-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transition: opacity 0.3s ease;
      padding: 20px;
      box-sizing: border-box;
      color: white !important;
      text-align: center;
    }
    
    .post-card:hover .post-img {
      filter: blur(3px) brightness(0.7);
    }
    
    .post-card:hover .post-overlay {
      opacity: 1;
    }
    
    .post-title {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 10px;
      color: white !important;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8), 0 0 10px rgba(0, 0, 0, 0.5);
    }
    
    .post-date {
      font-size: 0.9rem;
      color: white !important;
      text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
    }
    
    /* Trending posts section */
    .trending-section {
      max-width: 1440px;
      margin: 0 auto 40px;
      padding: 0 20px;
    }
    
    .trending-header {
      display: flex;
      align-items: center;
      justify-content: space-between;
      margin-bottom: 20px;
      flex-wrap: wrap;
      gap: 15px;
    }
    
    .trending-title {
      font-size: 1.8rem;
      color: #00008b;
      margin-bottom: 0;
      position: relative;
      display: flex;
      align-items: center;
    }
    
    .trending-title i {
      margin-right: 10px;
      color: #ff4500;
    }
    
    .trending-filters {
      display: flex;
      gap: 10px;
    }
    
    .trending-filter-btn {
      background-color: #f0f0f0;
      border: none;
      border-radius: 20px;
      padding: 8px 18px;
      cursor: pointer;
      transition: all 0.3s ease;
      font-weight: 500;
      font-size: 0.9rem;
    }
    
    .trending-filter-btn:hover {
      background-color: #e0e0e0;
    }
    
    .trending-filter-btn.active {
      background-color: #00008b;
      color: white;
      box-shadow: 0 2px 5px rgba(0,0,0,0.2);
    }
    
    .trending-slider-container {
      position: relative;
      overflow: hidden;
      padding: 10px 0;
    }
    
    .trending-slider {
      display: flex;
      transition: transform 0.5s ease;
      position: relative;
      width: 100%;
    }
    
    .trending-timeframe-container {
      display: none; /* Start hidden, will be made visible with JS */
      flex-wrap: nowrap; /* Don't wrap items - needed for slider */
      gap: 20px;
      width: 100%;
      min-width: 100%;
      transition: transform 0.5s ease; /* Smooth animation */
    }
    
    /* Active timeframe container */
    .trending-timeframe-container.active {
      display: flex;
    }
    
    .trending-post {
      flex: 0 0 calc(33.333% - 14px);
      min-width: calc(33.333% - 14px);
      height: 380px;
      position: relative;
      border-radius: 8px;
      overflow: hidden;
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.08);
      transition: transform 0.3s ease, box-shadow 0.3s ease;
    }
    
    .trending-post:hover {
      transform: translateY(-8px);
      box-shadow: 0 8px 25px rgba(0, 0, 0, 0.15);
    }
    
    .trending-post img {
      width: 100%;
      height: 100%;
      object-fit: cover;
      transition: filter 0.3s ease;
    }
    
    .trending-post-overlay {
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.7);
      display: flex;
      flex-direction: column;
      justify-content: center;
      align-items: center;
      opacity: 0;
      transition: opacity 0.3s ease;
      padding: 20px;
      box-sizing: border-box;
    }
    
    .trending-post:hover img {
      filter: blur(3px) brightness(0.7);
    }
    
    .trending-post:hover .trending-post-overlay {
      opacity: 1;
    }
    
    .trending-post-title {
      font-size: 1.5rem;
      font-weight: bold;
      margin-bottom: 10px;
      color: white;
      text-align: center;
      text-shadow: 0 2px 4px rgba(0, 0, 0, 0.8), 0 0 10px rgba(0, 0, 0, 0.5);
    }
    
    .trending-post-info {
      font-size: 0.9rem;
      color: white;
      text-align: center;
      text-shadow: 0 1px 3px rgba(0, 0, 0, 0.8);
      display: flex;
      align-items: center;
      gap: 15px;
      margin-top: 10px;
    }
    
    .trending-post-info i {
      margin-right: 5px;
    }
    
    .slider-controls {
      display: flex;
      justify-content: space-between;
      position: absolute;
      top: 50%;
      left: 0;
      right: 0;
      transform: translateY(-50%);
      z-index: 5;
      pointer-events: none;
      padding: 0 10px;
    }
    
    .slider-arrow {
      width: 50px;
      height: 50px;
      background: rgba(0, 0, 0, 0.6);
      border-radius: 50%;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 1.5rem;
      cursor: pointer;
      transition: background 0.3s ease, transform 0.3s ease;
      pointer-events: auto;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.2);
    }
    
    .slider-arrow:hover {
      background: rgba(0, 0, 0, 0.8);
      transform: scale(1.1);
    }
    
    /* Year section styling */
    .year-section {
      margin-bottom: 40px;
    }
    
    .collapsible {
      background-color: #00008b;
      padding: 15px 20px;
      border-radius: 6px;
      margin-bottom: 20px;
      font-size: 1.5rem;
      position: relative;
      cursor: pointer;
      transition: all 0.3s ease;
      color: white;
      display: flex;
      align-items: center;
      justify-content: space-between;
      box-shadow: 0 3px 10px rgba(0, 0, 0, 0.1);
      border: none;
      width: 100%;
      text-align: left;
    }
    
    .collapsible:hover {
      background-color: #146cb1;
      transform: translateY(-2px);
      box-shadow: 0 5px 15px rgba(0, 0, 0, 0.15);
    }
    
    .collapsible:active {
      transform: translateY(1px);
      box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
    }
    
    .collapsible::after {
      content: "â–¼";
      color: white;
      font-size: 14px;
      margin-left: 10px;
      transition: transform 0.3s ease;
    }
    
    .collapsible.active::after {
      transform: rotate(180deg);
    }
    
    .collapsible:focus {
      outline: none;
      box-shadow: 0 0 0 3px rgba(10, 61, 98, 0.3), 0 3px 10px rgba(0, 0, 0, 0.1);
    }
    
    /* Header styling */
    .posts-header h2 {
      color: #00008b;
      text-shadow: none;
    }
    
    .sort-form label {
      color: #00008b;
      text-shadow: none;
    }
    
    /* Dropdown styles */
    .dropdown {
      position: relative;
      display: inline-block;
    }
    
    .dropdown-btn {
      cursor: pointer;
    }
    
    .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 220px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      border-radius: 4px;
      padding: 8px 0;
    }
    
    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      text-align: left;
      transition: background-color 0.2s ease;
    }
    
    .dropdown-content a:hover {
      background-color: #f1f1f1;
    }
    
    .dropdown:hover .dropdown-content {
      display: block;
    }
    
    .dropdown-empty {
      padding: 12px 16px;
      color: #666;
      font-style: italic;
      text-align: center;
    }
    
    /* Responsive grid adjustments */
    @media (max-width: 1400px) {
      .posts-grid {
        grid-template-columns: repeat(2, 1fr);
        max-width: 1100px;
      }
      
      .post-card {
        height: 360px;
      }
      
      .trending-post {
        flex: 0 0 calc(50% - 10px);
        min-width: calc(50% - 10px);
      }
    }
    
    @media (max-width: 900px) {
      .posts-grid {
        grid-template-columns: 1fr;
        max-width: 600px;
        gap: 35px;
      }
      
      .post-card {
        height: 400px;
      }
      
      .trending-post {
        flex: 0 0 calc(100%);
        min-width: calc(100%);
      }
      
      .trending-header {
        flex-direction: column;
        align-items: flex-start;
      }
    }
    
    @media (max-width: 640px) {
      .post-card {
        height: 320px;
      }
      
      .trending-post {
        height: 320px;
      }
    }
    
    /* Mobile specific styles */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        padding: 10px 5px;
      }
      
      .logo {
        max-width: 150px;
        margin-bottom: 10px;
      }
      
      .header-nav {
        flex-wrap: wrap;
        justify-content: center;
        gap: 5px;
      }
      
      .nav-button {
        padding: 6px 10px;
        font-size: 0.9rem;
        margin: 2px;
      }
      
      /* This is a custom override just for this page */
      .video-section {
        height: auto;
        margin-top: 60px;
      }
      
      .NandU-banner {
        max-width: 90%;
      }
      
      .posts-header {
        flex-direction: column;
        align-items: flex-start;
        padding: 10px 15px;
      }
      
      .posts-header h2 {
        margin-bottom: 15px;
        font-size: 1.5rem;
      }
      
      .sort-form {
        width: 100%;
        margin-bottom: 10px;
      }
      
      .sort-form label {
        display: block;
        margin-bottom: 5px;
      }
      
      .sort-form select {
        width: 100%;
        padding: 8px;
      }
      
      .year-section {
        margin-bottom: 25px;
      }
      
      .collapsible {
        padding: 12px 15px;
        font-size: 1.3rem;
      }
      
      .footer-content {
        flex-direction: column;
        padding: 15px 10px;
        text-align: center;
      }
      
      .footer-left, .footer-right {
        width: 100%;
        text-align: center;
      }
      
      .footer-right {
        margin-top: 15px;
      }
      
      .footer-right p {
        font-size: 0.9rem;
        margin: 5px 0;
      }
      
      .social-icons {
        justify-content: center;
        margin-top: 10px;
      }
      
      .trending-title {
        font-size: 1.5rem;
      }
      
      .slider-arrow {
        width: 40px;
        height: 40px;
        font-size: 1.2rem;
      }
    }
    
    @media (max-width: 480px) {
      .post-title {
        font-size: 1.3rem;
      }
      
      .nav-button {
        padding: 5px 8px;
        font-size: 0.8rem;
      }
      
      .collapsible {
        font-size: 1.1rem;
        padding: 10px 12px;
      }
      
      .posts-header h2 {
        font-size: 1.3rem;
      }
      
      .video-section {
        height: auto;
        margin-top: 55px;
      }
      
      .trending-title {
        font-size: 1.3rem;
      }
      
      .trending-post-title {
        font-size: 1.3rem;
      }
      
      .slider-arrow {
        width: 35px;
        height: 35px;
        font-size: 1rem;
      }
    }
  </style>
  
</head>

<body>
<div class="content-wrapper">

  <header>
    <div class="header-content">
      <img src="/images/LOGO.webp" alt="Robolution Logo" class="logo">
      <!-- Mobile menu toggle will be added by JavaScript on small screens -->
      <nav class="header-nav">
        <a href="/user-landing" class="nav-button">News</a>
        <a href="/user-categories" class="nav-button">Categories</a>
        <div class="dropdown">
          <button class="nav-button dropdown-btn">Regional</button>
          <div class="dropdown-content">
            <a href="/regional?region=All">All Regions</a>
            <% 
            // Get unique regions with posts
            let regions = [];
            posts.forEach(post => {
              if (post.region && post.region !== 'All' && !regions.includes(post.region)) {
                regions.push(post.region);
              }
            });
            
            // Sort regions alphabetically
            regions.sort();
            
            if(regions.length > 0) { 
              // Display regions with posts
              regions.forEach(region => { %>
                <a href="/regional?region=<%= region %>"><%= region %></a>
              <% });
            } else { %>
              <div class="dropdown-empty">No regional posts available</div>
            <% } %>
          </div>
        </div>
        <a href="/registration" class="nav-button registration-button">Registration</a>
        <a href="/login" class="nav-button login-button">Login</a>
        <a href="/signup" class="nav-button signup-button">Sign Up</a>
        <a href="/logout" class="nav-button logout-button">Logout</a>
        <a href="/profile" class="nav-button profile-button" style="display: none;">
          <i class="fas fa-user-circle"></i> Profile
        </a>
      </nav>
    </div>
  </header>

  <div class="video-section">
    <video src="/images/Robolution2025.mp4" loop muted autoplay playsinline></video>
  </div>

  <main>

    <div class="NandU">
      <img src="/images/News and Updates.png" alt="News and Updates" class="NandU-banner">
    </div>

    <!-- Trending Posts Section -->
    <section class="trending-section">
      <div class="trending-header">
        <h2 class="trending-title"><i class="fas fa-fire"></i> Trending Posts</h2>
        <div class="trending-filters">
          <button class="trending-filter-btn" data-timeframe="weekly">This Week</button>
          <button class="trending-filter-btn active" data-timeframe="monthly">This Month</button>
          <button class="trending-filter-btn" data-timeframe="alltime">All Time</button>
        </div>
      </div>
      
      <div class="trending-slider-container">
        <div class="trending-slider" id="trendingSlider">
          <% 
            // Define time periods
            const oneWeekAgo = new Date();
            oneWeekAgo.setDate(oneWeekAgo.getDate() - 7);
            
            const oneMonthAgo = new Date();
            oneMonthAgo.setMonth(oneMonthAgo.getMonth() - 1);
            
            // Debug info - check if posts have upvotes field
            console.log('Total posts available:', posts.length);
            if (posts.length > 0) {
              console.log('Sample post upvotes field:', posts[0].upvotes ? `${posts[0].upvotes.length} upvotes` : 'no upvotes field');
            }
            
            // Make a separate array to avoid modifying the original posts
            let weeklyPosts = [...posts].filter(post => new Date(post.createdAt) >= oneWeekAgo);
            let monthlyPosts = [...posts].filter(post => new Date(post.createdAt) >= oneMonthAgo);
            let alltimePosts = [...posts]; // No date filter
            
            // Function to sort posts by upvotes
            const sortByUpvotes = (postArray) => {
              return postArray.sort((a, b) => {
                // Get upvote count - handle different data structures
                let aUpvotes = 0;
                let bUpvotes = 0;
                
                // Handle mongoose documents or plain objects
                if (a.upvotes) {
                  if (typeof a.upvotes === 'function') {
                    // Mongoose document with length method
                    aUpvotes = a.upvotes.length;
                  } else if (Array.isArray(a.upvotes)) {
                    // Plain array
                    aUpvotes = a.upvotes.length;
                  } else if (typeof a.upvotes === 'object' && a.upvotes.length !== undefined) {
                    // Array-like object
                    aUpvotes = a.upvotes.length;
                  }
                }
                
                if (b.upvotes) {
                  if (typeof b.upvotes === 'function') {
                    // Mongoose document with length method
                    bUpvotes = b.upvotes.length;
                  } else if (Array.isArray(b.upvotes)) {
                    // Plain array
                    bUpvotes = b.upvotes.length;
                  } else if (typeof b.upvotes === 'object' && b.upvotes.length !== undefined) {
                    // Array-like object
                    bUpvotes = b.upvotes.length;
                  }
                }
                
                // Primary sort by upvote count, secondary sort by date if equal upvotes
                if (bUpvotes !== aUpvotes) {
                  return bUpvotes - aUpvotes; // Sort by upvote count descending
                } else {
                  // If equal upvotes, sort by date (newest first)
                  return new Date(b.createdAt) - new Date(a.createdAt);
                }
              }).slice(0, 15); // Limit to 15 posts
            };
            
            // Sort all arrays by upvotes
            weeklyPosts = sortByUpvotes(weeklyPosts);
            monthlyPosts = sortByUpvotes(monthlyPosts);
            alltimePosts = sortByUpvotes(alltimePosts);
            
            // Default to monthly posts
            let trendingPosts = monthlyPosts;
            
            // Debug totals
            console.log('Weekly trending posts:', weeklyPosts.length);
            console.log('Monthly trending posts:', monthlyPosts.length);
            console.log('All-time trending posts:', alltimePosts.length);
          %>
          
          <!-- Weekly Posts Container (hidden by default) -->
          <div class="trending-timeframe-container" id="weekly-container">
            <% if (weeklyPosts.length > 0) { %>
              <% weeklyPosts.forEach(post => { %>
                <a href="/post/<%= post._id %>" class="trending-post">
                  <img src="<%= post.imageUrl %>" alt="<%= post.title %>">
                  <div class="trending-post-overlay">
                    <h3 class="trending-post-title"><%= post.title %></h3>
                    <div class="trending-post-info">
                      <span><i class="far fa-calendar-alt"></i> <%= new Date(post.createdAt).toLocaleString('en-PH', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        timeZone: 'Asia/Manila'
                      }) %></span>
                      <span><i class="fas fa-arrow-up"></i> <%= post.upvotes ? post.upvotes.length : 0 %> upvotes</span>
                    </div>
                  </div>
                </a>
              <% }) %>
            <% } else { %>
              <div style="padding: 30px; text-align: center; width: 100%;">
                <p>No trending posts from this week.</p>
              </div>
            <% } %>
          </div>
          
          <!-- Monthly Posts Container (shown by default) -->
          <div class="trending-timeframe-container active" id="monthly-container">
            <% if (monthlyPosts.length > 0) { %>
              <% monthlyPosts.forEach(post => { %>
                <a href="/post/<%= post._id %>" class="trending-post">
                  <img src="<%= post.imageUrl %>" alt="<%= post.title %>">
                  <div class="trending-post-overlay">
                    <h3 class="trending-post-title"><%= post.title %></h3>
                    <div class="trending-post-info">
                      <span><i class="far fa-calendar-alt"></i> <%= new Date(post.createdAt).toLocaleString('en-PH', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        timeZone: 'Asia/Manila'
                      }) %></span>
                      <span><i class="fas fa-arrow-up"></i> <%= post.upvotes ? post.upvotes.length : 0 %> upvotes</span>
                    </div>
                  </div>
                </a>
              <% }) %>
            <% } else { %>
              <div style="padding: 30px; text-align: center; width: 100%;">
                <p>No trending posts from this month.</p>
              </div>
            <% } %>
          </div>
          
          <!-- All Time Posts Container (hidden by default) -->
          <div class="trending-timeframe-container" id="alltime-container">
            <% if (alltimePosts.length > 0) { %>
              <% alltimePosts.forEach(post => { %>
                <a href="/post/<%= post._id %>" class="trending-post">
                  <img src="<%= post.imageUrl %>" alt="<%= post.title %>">
                  <div class="trending-post-overlay">
                    <h3 class="trending-post-title"><%= post.title %></h3>
                    <div class="trending-post-info">
                      <span><i class="far fa-calendar-alt"></i> <%= new Date(post.createdAt).toLocaleString('en-PH', {
                        year: 'numeric',
                        month: 'short',
                        day: 'numeric',
                        timeZone: 'Asia/Manila'
                      }) %></span>
                      <span><i class="fas fa-arrow-up"></i> <%= post.upvotes ? post.upvotes.length : 0 %> upvotes</span>
                    </div>
                  </div>
                </a>
              <% }) %>
            <% } else { %>
              <div style="padding: 30px; text-align: center; width: 100%;">
                <p>No trending posts available.</p>
              </div>
            <% } %>
          </div>
        </div>
        
        <div class="slider-controls">
          <div class="slider-arrow slider-prev" id="sliderPrev">
            <i class="fas fa-chevron-left"></i>
          </div>
          <div class="slider-arrow slider-next" id="sliderNext">
            <i class="fas fa-chevron-right"></i>
          </div>
        </div>
      </div>
    </section>

    <div class="posts-header">
      <h2>Posts by Year</h2>
      <form method="GET" action="/user-landing" class="sort-form">
        <label for="sort">Sort by:</label>
        <select name="sort" id="sort" onchange="this.form.submit()">
          <option value="desc" <%= locals.sort === 'desc' ? 'selected' : '' %>>Newest to Oldest</option>
          <option value="asc" <%= locals.sort === 'asc' ? 'selected' : '' %>>Oldest to Newest</option>
        </select>
      </form>
    </div>

    <% let years = {}; %>
    <% posts.forEach(post => { %>
      <% const year = new Date(post.createdAt).getFullYear(); %>
      <% if (!years[year]) years[year] = []; %>
      <% years[year].push(post); %>
    <% }); %>

    <% Object.keys(years).sort((a, b) => { %>
      <% return sort === 'asc' ? a - b : b - a; %>
    <% }).forEach(year => { %>
      <div class="year-section">
        <button class="collapsible"><%= year %> <span class="arrow">â–¼</span></button>
        <div class="posts-grid" style="display: none;">
          <% years[year].forEach(post => { %>
            <a href="/post/<%= post._id %>" class="post-card">
              <img src="<%= post.imageUrl %>" alt="<%= post.title %>" class="post-img">
              <div class="post-overlay">
                <h3 class="post-title" style="color: #ffffff !important;"><%= post.title %></h3>
                <p class="post-date" style="color: #ffffff !important;"><%= new Date(post.createdAt).toLocaleString('en-PH', {
                  year: 'numeric',
                  month: 'short',
                  day: 'numeric',
                  timeZone: 'Asia/Manila'
                }) %></p>
              </div>
            </a>
          <% }) %>
        </div>
      </div>
    <% }) %>

  </main>

  <footer>
    <div class="footer-content">
      <div class="footer-left">
        <p>Powered by Erovoutika</p>
      </div>

      <footer class="fixed-footer">
        <div class="footer-content">
          <div class="footer-left">
            <p>Powered by Erovoutika</p>
          </div>

          <div class="footer-right">
            <p>Unit 703, PARC HOUSE II, Epifanio de los Santos Ave, Makati, 1212 Metro Manila</p>
            <p><strong>Contact us via:</strong> 0974 423 1557 || erovoutika@gmail.com</p>
            <div class="social-icons">
              <a href="https://www.facebook.com/erovoutika" target="_blank" class="social-icon">f</a>
              <a href="https://www.erovoutika.ph" target="_blank" class="social-icon">â†—</a>
              <a href="https://www.linkedin.com/company/erovoutika/" target="_blank" class="social-icon">in</a>
            </div>
          </div>
        </div>
      </footer>
    </div>
  </footer>
</div>

<a href="#" class="back-to-top" id="backToTop">â†‘</a>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle collapsible sections
    const collapsibles = document.querySelectorAll('.collapsible');
    
    collapsibles.forEach(function(button) {
      button.addEventListener('click', function() {
        this.classList.toggle('active');
        
        // Toggle the display of the next element (the content)
        const content = this.nextElementSibling;
        if (content.style.display === 'grid' || content.style.display === 'block') {
          content.style.display = 'none';
        } else {
          content.style.display = 'grid';
        }
      });
      
      // Auto-expand the first section by default
      if (button === collapsibles[0]) {
        button.classList.add('active');
        const content = button.nextElementSibling;
        content.style.display = 'grid';
      }
    });
    
    // Trending posts slider functionality
    const slider = document.getElementById('trendingSlider');
    const prevBtn = document.getElementById('sliderPrev');
    const nextBtn = document.getElementById('sliderNext');
    
    if (slider && prevBtn && nextBtn) {
      // Get the current visible container
      const getVisibleContainer = () => {
        return document.querySelector('.trending-timeframe-container.active');
      };
      
      let currentPosition = 0;
      let postsPerSlide = 3; // Number of posts to slide at once
      
      // Function to update button states and max scroll based on current container
      function updateSliderState() {
        const container = getVisibleContainer();
        if (!container) return;
        
        const posts = container.querySelectorAll('.trending-post');
        if (posts.length === 0) return;
        
        const slideWidth = posts[0].offsetWidth + 20; // Post width + gap
        const visibleWidth = slider.clientWidth;
        
        // Calculate max pages based on full post widths
        const totalPosts = posts.length;
        const postsPerPage = Math.floor(visibleWidth / slideWidth) || 1;
        const totalPages = Math.ceil(totalPosts / postsPerPage);
        const currentPage = Math.round(currentPosition / (slideWidth * postsPerPage));
        
        // Calculate total content width
        const contentWidth = totalPosts * slideWidth;
        const maxScroll = Math.max(0, contentWidth - visibleWidth);
        
        // Update button states
        prevBtn.style.opacity = currentPosition <= 0 ? '0.5' : '1';
        prevBtn.style.pointerEvents = currentPosition <= 0 ? 'none' : 'auto';
        
        nextBtn.style.opacity = currentPosition >= maxScroll ? '0.5' : '1';
        nextBtn.style.pointerEvents = currentPosition >= maxScroll ? 'none' : 'auto';
        
        return { 
          slideWidth, 
          maxScroll, 
          postsPerPage,
          totalPages,
          currentPage 
        };
      }
      
      // Initialize slider state
      window.setTimeout(updateSliderState, 100); // Small delay to ensure DOM is ready
      
      // Previous slide button
      prevBtn.addEventListener('click', function() {
        const container = getVisibleContainer();
        if (!container) return;
        
        const { slideWidth, postsPerPage } = updateSliderState() || { slideWidth: 300, postsPerPage: 3 };
        const slideAmount = slideWidth * postsPerSlide;
        
        // Snap to previous page of posts
        currentPosition = Math.max(0, currentPosition - slideAmount);
        
        // Apply smooth transition
        container.style.transition = 'transform 0.5s ease';
        container.style.transform = `translateX(-${currentPosition}px)`;
        
        updateSliderState();
      });
      
      // Next slide button
      nextBtn.addEventListener('click', function() {
        const container = getVisibleContainer();
        if (!container) return;
        
        const { slideWidth, maxScroll, postsPerPage } = updateSliderState() || 
          { slideWidth: 300, maxScroll: 1000, postsPerPage: 3 };
        const slideAmount = slideWidth * postsPerSlide;
        
        // Snap to next page of posts
        currentPosition = Math.min(maxScroll, currentPosition + slideAmount);
        
        // Apply smooth transition
        container.style.transition = 'transform 0.5s ease';
        container.style.transform = `translateX(-${currentPosition}px)`;
        
        updateSliderState();
      });
      
      // Handle trending posts time frame filter buttons
      const timeframeButtons = document.querySelectorAll('.trending-filter-btn');
      const timeframeContainers = document.querySelectorAll('.trending-timeframe-container');
      
      timeframeButtons.forEach(function(button) {
        button.addEventListener('click', function() {
          // Remove active class from all buttons
          timeframeButtons.forEach(btn => btn.classList.remove('active'));
          
          // Add active class to clicked button
          this.classList.add('active');
          
          // Hide all containers
          timeframeContainers.forEach(container => {
            container.classList.remove('active');
            // Reset all transforms
            container.style.transform = '';
          });
          
          // Show the selected container
          const timeframe = this.dataset.timeframe;
          document.getElementById(timeframe + '-container').classList.add('active');
          
          // Reset position
          currentPosition = 0;
          
          // Update buttons for the new container
          updateSliderState();
        });
      });
      
      // Recalculate on window resize
      window.addEventListener('resize', function() {
        const container = getVisibleContainer();
        if (!container) return;
        
        // Get updated state
        const { maxScroll } = updateSliderState() || { maxScroll: 0 };
        
        // Ensure we're not scrolled past the max
        if (currentPosition > maxScroll) {
          currentPosition = maxScroll;
          container.style.transform = `translateX(-${currentPosition}px)`;
        }
      });
    }
    
    // Handle back-to-top button
    const backToTopButton = document.getElementById('backToTop');
    
    if (backToTopButton) {
      window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
          backToTopButton.classList.add('show');
        } else {
          backToTopButton.classList.remove('show');
        }
      });
      
      backToTopButton.addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
    
    // Check if user is logged in using a cookie check
    function checkLoginStatus() {
      // Make a server-side API call to check the session status
      fetch('/api/check-session')
        .then(response => response.json())
        .then(data => {
          const isLoggedIn = data.authenticated;
          
          // Get all relevant buttons
          const loginButton = document.querySelector('.login-button');
          const signupButton = document.querySelector('.signup-button');
          const logoutButton = document.querySelector('.logout-button');
          const profileButton = document.querySelector('.profile-button');
          
          if (isLoggedIn) {
            // User is logged in
            console.log('User is logged in, showing logout button');
            if (loginButton) loginButton.style.display = 'none';
            if (signupButton) signupButton.style.display = 'none';
            if (logoutButton) logoutButton.style.display = 'inline-block';
            if (profileButton) profileButton.style.display = 'inline-block';
            
            // Store login status in localStorage for client-side checks
            localStorage.setItem('isLoggedIn', 'true');
          } else {
            // User is not logged in
            console.log('User is NOT logged in, hiding logout button');
            if (loginButton) loginButton.style.display = 'inline-block';
            if (signupButton) signupButton.style.display = 'inline-block';
            if (logoutButton) logoutButton.style.display = 'none';
            if (profileButton) profileButton.style.display = 'none';
            
            // Clear login status from localStorage
            localStorage.removeItem('isLoggedIn');
          }
        })
        .catch(error => {
          console.error('Error checking login status:', error);
          // On error, assume not logged in
          localStorage.removeItem('isLoggedIn');
        });
    }
    
    // Add function to verify server session before redirect
    window.checkServerSession = function(event) {
      event.preventDefault();
      
      // Make a quick API call to check if the session is valid on the server
      fetch('/api/check-session')
        .then(response => response.json())
        .then(data => {
          if (data.authenticated) {
            // If authenticated on server, proceed to profile page
            window.location.href = '/profile';
          } else {
            // If not authenticated on server, clear local storage and redirect to login
            localStorage.removeItem('isLoggedIn');
            window.location.href = '/login?redirect=/profile';
          }
        })
        .catch(error => {
          console.error('Error checking session:', error);
          // On error, assume not logged in and redirect to login
          localStorage.removeItem('isLoggedIn');
          window.location.href = '/login';
        });
    };
    
    // Run on page load
    checkLoginStatus();
    
    // Add click handler to profile button to verify session
    const profileButton = document.querySelector('.profile-button');
    if (profileButton) {
      profileButton.addEventListener('click', function(event) {
        event.preventDefault();
        fetch('/api/check-session')
          .then(response => response.json())
          .then(data => {
            if (data.authenticated) {
              window.location.href = '/profile';
            } else {
              localStorage.removeItem('isLoggedIn');
              window.location.href = '/login?redirect=/profile';
            }
          })
          .catch(error => {
            console.error('Error checking session:', error);
            localStorage.removeItem('isLoggedIn');
            window.location.href = '/login';
          });
      });
    }
  });
</script>
</body>

</html>
