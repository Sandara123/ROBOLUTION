<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title><%= post.title %> | Robolution Blog</title>
  <link rel="shortcut icon" href="/images/ROBOLUTION_ICON.ico" type="image/x-icon">
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/responsive.css">
  <script src="/js/script.js" defer></script>
  <script src="/js/mobile.js" defer></script>
  <!-- Add Font Awesome for the upvote button and icons -->
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
  <style>
    body, main {
      background-color: #ffffff;
      background-image: none;
    }
    
    .post-detail-container {
      max-width: 900px;
      margin: 0 auto;
      padding: 120px 20px 40px;
    }
    
    .post-header {
      margin-bottom: 40px;
    }
    
    .post-title {
      font-size: 2.5rem;
      color: #00008b;
      margin-bottom: 15px;
      line-height: 1.2;
    }
    
    .post-meta {
      display: flex;
      align-items: center;
      gap: 15px;
      flex-wrap: wrap;
      font-size: 0.95rem;
      color: #666;
      margin-bottom: 20px;
    }
    
    .post-meta-item {
      display: flex;
      align-items: center;
    }
    
    .post-meta-item:not(:last-child)::after {
      content: "•";
      margin-left: 15px;
      color: #ccc;
    }
    
    .post-region {
      display: inline-block;
      background-color: #00008b;
      color: white;
      padding: 3px 12px;
      border-radius: 20px;
      font-size: 0.85rem;
      margin-right: 5px;
    }
    
    .post-image {
      width: 100%;
      max-height: 500px;
      object-fit: cover;
      border-radius: 8px;
      margin-bottom: 30px;
      box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
    }
    
    .post-content {
      font-size: 1.1rem;
      line-height: 1.8;
      color: #333;
      margin-bottom: 40px;
      white-space: pre-line;
      word-wrap: break-word;
      overflow-wrap: break-word;
      text-align: justify;
      hyphens: auto;
      -webkit-hyphens: auto;
      -ms-hyphens: auto;
    }
    
    .post-content p {
      margin-bottom: 20px;
      white-space: pre-line;
      word-wrap: break-word;
      overflow-wrap: break-word;
      text-align: justify;
      hyphens: auto;
      -webkit-hyphens: auto;
      -ms-hyphens: auto;
    }
    
    /* Improve readability for long text */
    .post-content {
      max-width: 800px;
      margin: 0 auto 40px;
      padding: 0 20px;
    }
    
    /* Add proper spacing between paragraphs */
    .post-content p:not(:last-child) {
      margin-bottom: 1.5em;
    }
    
    .back-button {
      display: inline-block;
      background-color: #00008b;
      color: white;
      text-decoration: none;
      padding: 10px 20px;
      border-radius: 4px;
      margin-top: 20px;
      font-weight: bold;
      transition: background-color 0.2s;
    }
    
    .back-button:hover {
      background-color: #1a5a8d;
    }
    
    /* Upvotes and comments section */
    .interaction-section {
      margin: 40px 0;
      padding: 20px;
      background-color: #f9f9f9;
      border-radius: 8px;
    }
    
    .upvote-section {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 20px;
    }
    
    .upvote-btn {
      display: flex;
      align-items: center;
      gap: 5px;
      padding: 8px 15px;
      background-color: #f0f0f0;
      border: 1px solid #ddd;
      border-radius: 20px;
      cursor: pointer;
      transition: all 0.2s;
    }
    
    .upvote-btn:hover {
      background-color: #e6e6e6;
    }
    
    .upvote-btn.active {
      background-color: #ff4500;
      color: white;
    }
    
    .upvote-btn.disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
    
    .upvote-count {
      font-weight: bold;
      color: #333;
    }
    
    .comment-section {
      margin-top: 20px;
    }
    
    .comment-form {
      margin-bottom: 30px;
    }
    
    .comment-textarea {
      width: 100%;
      padding: 12px;
      border: 1px solid #ddd;
      border-radius: 4px;
      resize: vertical;
      min-height: 100px;
      font-family: inherit;
      margin-bottom: 10px;
    }
    
    .comment-submit {
      padding: 10px 20px;
      background-color: #00008b;
      color: white;
      border: none;
      border-radius: 4px;
      cursor: pointer;
      font-weight: bold;
    }
    
    .comment-submit:hover {
      background-color: #1a5a8d;
    }
    
    .comment-submit:disabled {
      opacity: 0.7;
      cursor: not-allowed;
    }
    
    .comments-list {
      margin-top: 20px;
    }
    
    .comment-item {
      padding: 15px;
      border-bottom: 1px solid #eee;
    }
    
    .comment-item:last-child {
      border-bottom: none;
    }
    
    .comment-header {
      display: flex;
      align-items: center;
      gap: 10px;
      margin-bottom: 8px;
    }
    
    .comment-user-img {
      width: 40px;
      height: 40px;
      border-radius: 50%;
      object-fit: cover;
    }
    
    .comment-user-name {
      font-weight: bold;
      color: #00008b;
    }
    
    .comment-date {
      color: #888;
      font-size: 0.85rem;
    }
    
    .comment-content {
      color: #333;
      line-height: 1.5;
    }
    
    .login-notice {
      padding: 15px;
      background-color: #f8f8f8;
      border: 1px solid #eee;
      border-radius: 4px;
      text-align: center;
      margin: 20px 0;
    }
    
    .login-link {
      color: #00008b;
      text-decoration: underline;
    }
    
    .share-section {
      margin-top: 40px;
      padding-top: 20px;
      border-top: 1px solid #eee;
      margin-bottom: 80px;
    }
    
    .share-title {
      font-size: 1.2rem;
      color: #00008b;
      margin-bottom: 15px;
    }
    
    .share-buttons {
      display: flex;
      gap: 10px;
    }
    
    .share-button {
      display: inline-block;
      padding: 8px 16px;
      border-radius: 4px;
      color: white;
      text-decoration: none;
      font-size: 0.9rem;
    }
    
    .share-facebook {
      background-color: #3b5998;
    }
    
    .share-twitter {
      background-color: #1da1f2;
    }
    
    .share-linkedin {
      background-color: #0077b5;
    }
    
    /* Dropdown styles */
    .dropdown {
      position: relative;
      display: inline-block;
    }
    
    .dropdown-btn {
      cursor: pointer;
    }
    
    .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      border-radius: 4px;
    }
    
    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      text-align: left;
    }
    
    .dropdown-content a:hover {
      background-color: #f1f1f1;
    }
    
    .dropdown:hover .dropdown-content {
      display: block;
    }
    
    /* Responsive adjustments */
    @media (max-width: 768px) {
      .header-content {
        flex-direction: column;
        padding: 10px 5px;
      }
      
      .logo {
        max-width: 150px;
        margin-bottom: 10px;
      }
      
      .header-nav {
        flex-wrap: wrap;
        justify-content: center;
        gap: 5px;
      }
      
      .nav-button {
        padding: 6px 10px;
        font-size: 0.9rem;
        margin: 2px;
      }
      
      .post-detail-container {
        padding: 100px 15px 30px;
      }
      
      .post-title {
        font-size: 1.8rem;
      }
      
      .post-meta {
        flex-direction: column;
        align-items: flex-start;
        gap: 5px;
      }
      
      .post-meta-item:not(:last-child)::after {
        display: none;
      }
      
      .post-content {
        padding: 0 10px;
        font-size: 1rem;
        line-height: 1.6;
      }
      
      .share-buttons {
        flex-wrap: wrap;
        gap: 8px;
      }
      
      .share-button {
        flex: 1;
        min-width: 120px;
        text-align: center;
      }
      
      .footer-content {
        flex-direction: column;
        padding: 15px 10px;
        text-align: center;
      }
      
      .footer-left, .footer-right {
        width: 100%;
        text-align: center;
      }
      
      .footer-right {
        margin-top: 15px;
      }
      
      .footer-right p {
        font-size: 0.9rem;
        margin: 5px 0;
      }
      
      .social-icons {
        justify-content: center;
        margin-top: 10px;
      }
    }
    
    @media (max-width: 480px) {
      .post-title {
        font-size: 1.5rem;
      }
      
      .post-detail-container {
        padding: 90px 12px 20px;
      }
      
      .post-content {
        font-size: 0.95rem;
      }
      
      .nav-button {
        padding: 5px 8px;
        font-size: 0.8rem;
      }
      
      .post-region {
        font-size: 0.8rem;
        padding: 2px 8px;
      }
      
      .share-title {
        font-size: 1.1rem;
      }
      
      .share-button {
        font-size: 0.8rem;
        padding: 6px 12px;
      }
    }
  </style>
</head>

<body>
<div class="content-wrapper">

  <header>
    <div class="header-content">
      <img src="/images/LOGO.webp" alt="Robolution Logo" class="logo">
      <!-- Mobile menu toggle will be added by JavaScript on small screens -->
      <nav class="header-nav">
        <a href="/user-landing" class="nav-button">News</a>
        <a href="/user-categories" class="nav-button">Categories</a>
        <div class="dropdown">
          <button class="nav-button dropdown-btn">Regional</button>
          <div class="dropdown-content">
            <a href="/regional?region=All">All Regions</a>
            <% 
            // Get unique regions with posts
            let validRegions = [];
            
            // Extract regions from the available posts (we'll get this from the app.locals or pass it from the controller)
            if (typeof uniqueRegions !== 'undefined' && uniqueRegions.length > 0) {
              validRegions = uniqueRegions;
            } else {
              // Fallback - current post's region
              if (post.region && post.region !== 'All' && !validRegions.includes(post.region)) {
                validRegions.push(post.region);
              }
            }
            
            // Display regions with posts
            validRegions.sort().forEach(region => { %>
              <a href="/regional?region=<%= region %>"><%= region %></a>
            <% }); %>
          </div>
        </div>
        <a href="/registration" class="nav-button registration-button" target="_blank">Registration</a>
        <a href="/login" class="nav-button login-button">Login</a>
        <a href="/signup" class="nav-button signup-button">Sign Up</a>
        <a href="/logout" class="nav-button logout-button">Logout</a>
        <a href="/profile" class="nav-button profile-button" style="display: none;">
          <i class="fas fa-user-circle"></i> Profile
        </a>
      </nav>
    </div>
  </header>

  <main>
    <div class="post-detail-container">
      <div class="post-header">
        <h1 class="post-title"><%= post.title %></h1>
        <div class="post-meta">
          <div class="post-meta-item">
            <span><strong>Author:</strong> <%= post.author %></span>
          </div>
          <div class="post-meta-item">
            <span><strong>Posted:</strong> <%= new Date(post.createdAt).toLocaleString('en-PH', { 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric',
              hour: '2-digit',
              minute: '2-digit',
              timeZone: 'Asia/Manila'
            }) %></span>
          </div>
          <% if (post.region && post.region !== 'All') { %>
          <div class="post-meta-item">
            <span><strong>Region:</strong> <span class="post-region"><%= post.region %></span></span>
          </div>
          <% } %>
        </div>
      </div>
      
      <img src="<%= post.imageUrl %>" alt="<%= post.title %>" class="post-image">
      
      <div class="post-content">
        <p><%= post.content %></p>
      </div>
      
      <a href="/user-landing" class="back-button">← Back to Posts</a>
      
      <!-- Upvote and Comment Section -->
      <div class="interaction-section">
        <div class="upvote-section">
          <% const upvoteCount = post.upvotes ? post.upvotes.length : 0; %>
          <% const isLoggedIn = typeof user !== 'undefined' && user && user.id; %>
          <% const hasUpvoted = isLoggedIn && post.upvotes && post.upvotes.some(id => id.toString() === user.id.toString()); %>
          
          <button id="upvoteBtn" class="upvote-btn <%= hasUpvoted ? 'active' : '' %> <%= !isLoggedIn ? 'disabled' : '' %>" 
            data-post-id="<%= post._id %>" <%= !isLoggedIn ? 'disabled' : '' %>>
            <i class="fas fa-arrow-up"></i>
            Upvote
          </button>
          <span class="upvote-count" id="upvoteCount"><%= upvoteCount %></span>
        </div>
        
        <div class="comment-section">
          <h3>Comments (<span id="commentCount"><%= post.comments ? post.comments.length : 0 %></span>)</h3>
          
          <% if (isLoggedIn) { %>
            <form id="commentForm" class="comment-form" data-post-id="<%= post._id %>">
              <textarea id="commentText" class="comment-textarea" placeholder="Add your comment..."></textarea>
              <button type="submit" class="comment-submit">Post Comment</button>
            </form>
          <% } else { %>
            <div class="login-notice">
              Please <a href="/login?redirect=<%= encodeURIComponent(req.originalUrl) %>" class="login-link">log in</a> to comment on this post.
            </div>
          <% } %>
          
          <div class="comments-list" id="commentsList">
            <% if (post.comments && post.comments.length > 0) { %>
              <% post.comments.forEach(comment => { %>
                <div class="comment-item">
                  <div class="comment-header">
                    <% 
                      // Ensure we have valid user data
                      const commentUser = comment.user || {};
                      const username = commentUser.username || 'Anonymous User';
                      // Set default profile picture with fallback
                      const defaultImg = typeof defaultProfilePicture !== 'undefined' ? defaultProfilePicture : '/images/default-profile.png';
                      const profilePic = commentUser.profilePicture || defaultImg;
                    %>
                    <img src="<%= profilePic %>" 
                         alt="<%= username %>" class="comment-user-img" 
                         onerror="this.src='<%= defaultImg %>';">
                    <div>
                      <div class="comment-user-name"><%= username %></div>
                      <div class="comment-date"><%= new Date(comment.createdAt).toLocaleString('en-PH', { 
                        year: 'numeric', 
                        month: 'short', 
                        day: 'numeric',
                        hour: '2-digit', 
                        minute: '2-digit',
                        timeZone: 'Asia/Manila'
                      }) %></div>
                    </div>
                  </div>
                  <p class="comment-content"><%= comment.text %></p>
                </div>
              <% }) %>
            <% } else { %>
              <p id="noComments">No comments yet. Be the first to comment!</p>
            <% } %>
          </div>
        </div>
      </div>
      
      <div class="share-section">
        <h3 class="share-title">Share this post</h3>
        <div class="share-buttons">
          <a href="https://www.facebook.com/sharer/sharer.php?u=<%= encodeURIComponent(`http://${req.headers.host}${req.url}`) %>" target="_blank" class="share-button share-facebook">Facebook</a>
          <a href="https://twitter.com/intent/tweet?url=<%= encodeURIComponent(`http://${req.headers.host}${req.url}`) %>&text=<%= encodeURIComponent(post.title) %>" target="_blank" class="share-button share-twitter">Twitter</a>
          <a href="https://www.linkedin.com/shareArticle?mini=true&url=<%= encodeURIComponent(`http://${req.headers.host}${req.url}`) %>&title=<%= encodeURIComponent(post.title) %>" target="_blank" class="share-button share-linkedin">LinkedIn</a>
        </div>
      </div>
    </div>
  </main>

  <footer>
    <div class="footer-content">
      <div class="footer-left">
        <p>Powered by Erovoutika</p>
      </div>
      <div class="footer-right">
        <p>Unit 703, PARC HOUSE II, Epifanio de los Santos Ave, Makati, 1212 Metro Manila</p>
        <p><strong>Contact us via:</strong> 0974 423 1557 || erovoutika@gmail.com</p>
        <div class="social-icons">
          <a href="https://www.facebook.com/erovoutika" target="_blank" class="social-icon">f</a>
          <a href="https://www.erovoutika.ph" target="_blank" class="social-icon">↗</a>
          <a href="https://www.linkedin.com/company/erovoutika/" target="_blank" class="social-icon">in</a>
        </div>
      </div>
    </div>
  </footer>
</div>

<a href="#" class="back-to-top" id="backToTop">↑</a>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    // Handle collapsible sections
    const backToTopButton = document.getElementById('backToTop');
    
    if (backToTopButton) {
      // Show button when user scrolls down
      window.addEventListener('scroll', function() {
        if (window.pageYOffset > 300) {
          backToTopButton.classList.add('show');
        } else {
          backToTopButton.classList.remove('show');
        }
      });
      
      // Smooth scroll to top when button clicked
      backToTopButton.addEventListener('click', function(e) {
        e.preventDefault();
        window.scrollTo({ top: 0, behavior: 'smooth' });
      });
    }
    
    // Check if user is logged in using a cookie check
    function checkLoginStatus() {
      // Make a server-side API call to check the session status
      fetch('/api/check-session')
        .then(response => response.json())
        .then(data => {
          const isLoggedIn = data.authenticated;
          
          // Get all relevant buttons
          const loginButton = document.querySelector('.login-button');
          const signupButton = document.querySelector('.signup-button');
          const logoutButton = document.querySelector('.logout-button');
          const profileButton = document.querySelector('.profile-button');
          
          if (isLoggedIn) {
            // User is logged in
            if (loginButton) loginButton.style.display = 'none';
            if (signupButton) signupButton.style.display = 'none';
            if (logoutButton) logoutButton.style.display = 'inline-block';
            if (profileButton) profileButton.style.display = 'inline-block';
            
            // Store login status in localStorage for client-side checks
            localStorage.setItem('isLoggedIn', 'true');
          } else {
            // User is not logged in
            if (loginButton) loginButton.style.display = 'inline-block';
            if (signupButton) signupButton.style.display = 'inline-block';
            if (logoutButton) logoutButton.style.display = 'none';
            if (profileButton) profileButton.style.display = 'none';
            
            // Clear login status from localStorage
            localStorage.removeItem('isLoggedIn');
          }
        })
        .catch(error => {
          console.error('Error checking login status:', error);
          // On error, assume not logged in
          localStorage.removeItem('isLoggedIn');
        });
    }
    
    // Handle upvote button click
    const upvoteBtn = document.getElementById('upvoteBtn');
    if (upvoteBtn && !upvoteBtn.disabled) {
      upvoteBtn.addEventListener('click', function() {
        const postId = this.getAttribute('data-post-id');
        
        fetch(`/api/posts/${postId}/upvote`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          }
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Update UI
            const upvoteCount = document.getElementById('upvoteCount');
            upvoteCount.textContent = data.upvotes;
            
            // Toggle active class
            this.classList.toggle('active', data.hasUpvoted);
          } else {
            console.error('Error upvoting:', data.error);
            alert('Failed to upvote: ' + data.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred. Please try again.');
        });
      });
    }
    
    // Handle comment form submission
    const commentForm = document.getElementById('commentForm');
    if (commentForm) {
      commentForm.addEventListener('submit', function(e) {
        e.preventDefault();
        
        const postId = this.getAttribute('data-post-id');
        const commentText = document.getElementById('commentText').value.trim();
        
        if (!commentText) {
          alert('Please enter a comment.');
          return;
        }
        
        fetch(`/api/posts/${postId}/comment`, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json'
          },
          body: JSON.stringify({ text: commentText })
        })
        .then(response => response.json())
        .then(data => {
          if (data.success) {
            // Clear the form
            document.getElementById('commentText').value = '';
            
            // Add new comment to the list
            const commentsList = document.getElementById('commentsList');
            const noComments = document.getElementById('noComments');
            
            if (noComments) {
              noComments.remove();
            }
            
            // Create a new comment element with robust data handling
            const username = data.comment.user?.username || 'Anonymous User';
            // Use a constant for default profile picture with fallback
            const defaultProfilePic = '/images/default-user.png';
            const profilePic = data.comment.user?.profilePicture || defaultProfilePic;
            
            const commentItem = document.createElement('div');
            commentItem.className = 'comment-item';
            commentItem.innerHTML = `
              <div class="comment-header">
                <img src="${profilePic}" 
                     alt="${username}" class="comment-user-img"
                     onerror="this.src='${defaultProfilePic}';">
                <div>
                  <div class="comment-user-name">${username}</div>
                  <div class="comment-date">${new Date().toLocaleString('en-PH', {
                    year: 'numeric',
                    month: 'short',
                    day: 'numeric',
                    hour: '2-digit',
                    minute: '2-digit',
                    timeZone: 'Asia/Manila'
                  })}</div>
                </div>
              </div>
              <p class="comment-content">${data.comment.text}</p>
            `;
            
            // Add to the top of the comments list
            commentsList.insertBefore(commentItem, commentsList.firstChild);
            
            // Update comment count
            const commentCount = document.getElementById('commentCount');
            commentCount.textContent = parseInt(commentCount.textContent) + 1;
          } else {
            console.error('Error posting comment:', data.error);
            alert('Failed to post comment: ' + data.error);
          }
        })
        .catch(error => {
          console.error('Error:', error);
          alert('An error occurred. Please try again.');
        });
      });
    }
    
    // Run on page load
    checkLoginStatus();
  });
</script>
</body>

</html> 