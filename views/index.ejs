<!DOCTYPE html>
<html lang="en">

<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Robolution Blog</title>
  <link rel="stylesheet" href="/css/style.css">
  <link rel="stylesheet" href="/css/responsive.css">
  <script src="/js/script.js" defer></script>
  <script src="/js/mobile.js" defer></script>
  <style>
    body, main {
      background-color: #ffffff;
      background-image: none;
    }
    
    /* Dropdown styles */
    .dropdown {
      position: relative;
      display: inline-block;
    }
  
    .dropdown-btn {
      cursor: pointer;
    }
  
    .dropdown-content {
      display: none;
      position: absolute;
      background-color: #f9f9f9;
      min-width: 160px;
      box-shadow: 0px 8px 16px 0px rgba(0,0,0,0.2);
      z-index: 1;
      top: 100%;
      left: 0;
    }
  
    .dropdown-content a {
      color: black;
      padding: 12px 16px;
      text-decoration: none;
      display: block;
      text-align: left;
    }
  
    .dropdown-content a:hover {
      background-color: #f1f1f1;
    }
  
    .dropdown-empty {
      padding: 12px 16px;
      color: #666;
      font-style: italic;
    }
  
    /* Collapsible styles */
    .collapsible {
      background-color: #00008b;
      color: white;
      cursor: pointer;
      padding: 18px;
      width: 100%;
      border: none;
      text-align: left;
      outline: none;
      font-size: 18px;
      margin-bottom: 10px;
      position: relative;
      border-radius: 5px;
    }
  
    .collapsible:hover { /* Combined active and hover for simplicity, or separate if needed */
      background-color: #00006b;
    }
     .collapsible.active {
      background-color: #00006b; /* Keep active state distinct if desired */
    }
  
    .arrow {
      position: absolute;
      right: 20px;
      transition: transform 0.3s ease;
    }
  
    .collapsible.active .arrow {
      transform: rotate(180deg);
    }
  
    .content {
      display: grid;
      grid-template-columns: repeat(3, 1fr);
      gap: 15px;
      padding: 15px;
      width: 100%;
      box-sizing: border-box;
      
      /* Collapsible properties */
      max-height: 0;
      opacity: 0;
      overflow: hidden;
      transition: max-height 0.4s ease-out, opacity 0.4s ease-out;
    }
  
    .collapsible.active + .content {
      max-height: 5000px; /* Adjust as needed for max content height */
      opacity: 1;
      /* overflow: visible; /* Or auto if content might exceed max-height */
    }
  
    /* Post card styles */
    .post-card {
      width: 100%; /* Takes full width of grid cell */
      background: white;
      border-radius: 10px;
      overflow: hidden;
      box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
      position: relative;
      /* margin-bottom: 20px; /* Grid gap handles spacing */
      display: flex;
      flex-direction: column;
      box-sizing: border-box;
      min-height: 300px; /* Example min-height */
    }
  
    .post-img {
      width: 100%;
      height: 180px; /* Adjusted height */
      object-fit: cover;
      object-position: center;
    }
  
    .post-card h3 {
      padding: 12px 15px 5px;
      margin: 0;
      color: #00008b;
      font-size: 16px;
      line-height: 1.3;
    }
  
    .post-card-content {
      padding: 0 15px 10px;
      color: #444;
      font-size: 14px;
      flex-grow: 1; /* Allows content to fill space */
    }
  
    .post-card-content p {
      margin: 8px 0;
      overflow: hidden;
      display: -webkit-box;
      -webkit-line-clamp: 3; /* Limits to 3 lines */
      -webkit-box-orient: vertical;
      font-size: 14px;
      line-height: 1.4;
    }
  
    .date-posted {
      font-size: 0.8em;
      color: #777;
      margin-top: 5px; /* Adjusted margin */
    }
  
    .post-actions {
      display: flex;
      justify-content: flex-end;
      padding: 0 15px 15px;
      gap: 10px;
    }
  
    .edit-btn, .delete-btn {
      padding: 8px 15px;
      border: none;
      border-radius: 5px;
      cursor: pointer;
      font-size: 14px;
      text-decoration: none;
      display: inline-block;
    }
  
    .edit-btn {
      background: #2196F3;
      color: white;
    }
  
    .delete-btn {
      background: #f44336;
      color: white;
    }
  
    .posts-header {
      display: flex;
      justify-content: space-between;
      align-items: center;
      margin-bottom: 20px;
      padding: 10px 0;
    }
  
    .posts-header h2 {
      margin: 0;
      color: #00008b;
    }
  
    .posts-controls {
      display: flex;
      gap: 15px;
      align-items: center;
    }
  
    .search-form input {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      width: 200px;
    }
  
    .sort-form {
      display: flex;
      align-items: center;
      gap: 10px;
    }
  
    .sort-form select {
      padding: 8px 12px;
      border: 1px solid #ddd;
      border-radius: 5px;
      background-color: white;
    }
  
    .year-section {
      margin-bottom: 30px;
    }
  
    /* Mobile responsiveness for the grid */
    @media screen and (max-width: 992px) {
      .content {
        grid-template-columns: repeat(2, 1fr);
      }
    }
  
    @media screen and (max-width: 768px) {
      .content {
        grid-template-columns: 1fr;
      }
  
      .posts-header {
        flex-direction: column;
        align-items: flex-start;
        gap: 15px;
      }
  
      .posts-controls {
        flex-direction: column;
        width: 100%;
      }
  
      .search-form, .sort-form, .search-form input {
        width: 100%;
      }
    }
  </style>
  
  <% if (locals.dashboard) { %>
  <style>
    /* Dashboard specific styles */
    body {
      padding: 0 !important; /* Ensure no extra padding */
      margin: 0 !important; /* Ensure no extra margin */
      background-color: #fff !important; /* Match dashboard background if needed */
    }
    
    .content-wrapper {
      padding-top: 0 !important;
      overflow-x: hidden; /* Prevent horizontal scroll */
    }
    
    /* Hide elements when in dashboard */
    header, footer, .video-section, .back-to-top, .NandU { /* Hide NandU banner as well */
      display: none !important;
    }
    
    main {
      padding-top: 20px !important;
      margin-top: 0 !important; /* Remove main's top margin if any */
      padding-left: 15px !important; /* Adjust if main content needs padding */
      padding-right: 15px !important;
      width: 100% !important;
      box-sizing: border-box !important;
    }

    /* Ensure year sections and their content take full width */
    .year-section {
        width: 100% !important;
        box-sizing: border-box !important;
        margin-bottom: 20px !important;
    }
    
    /* Overrides for .content within dashboard to ensure it's always grid and visible */
    .year-section > .content {
        display: grid !important;
        grid-template-columns: repeat(3, 1fr) !important;
        gap: 15px !important;
        padding: 15px 0 !important; /* Padding for items inside, adjust if year-section has padding */
        width: 100% !important;
        box-sizing: border-box !important;
        max-height: none !important; /* Always expanded in dashboard */
        opacity: 1 !important; /* Always visible */
        overflow: visible !important;
    }

    .year-section > .collapsible {
        display: block !important; /* Make sure year header is visible */
         margin-bottom: 0 !important; /* Remove margin if .content has top padding */
    }
    
    .year-section > .content > .post-card {
        width: 100% !important; 
        margin-bottom: 0 !important; 
    }
    
    @media screen and (max-width: 992px) {
      .year-section > .content {
        grid-template-columns: repeat(2, 1fr) !important;
      }
    }

    @media screen and (max-width: 768px) {
      .year-section > .content {
        grid-template-columns: 1fr !important;
      }
    }
     /* Ensure dashboard's main area allows content to fill */
    .main-content .content-frame main {
        padding: 0 !important; /* Reset padding if iframe's main has it */
    }

  </style>
  <% } %>
</head>

<body>
<div class="content-wrapper">

  <main>

    <div class="posts-header">
      <h2>Posts by Year</h2>
      <div class="posts-controls">
        <div class="search-form">
          <input type="text" id="searchInput" placeholder="Search by title" value="<%= typeof search !== 'undefined' ? search : '' %>">
        </div>
        <form method="GET" action="/index" class="sort-form">
          <label for="sort">Sort by:</label>
          <select name="sort" id="sort" onchange="this.form.submit()">
            <option value="desc" <%= sort === 'desc' ? 'selected' : '' %>>Newest to Oldest</option>
            <option value="asc" <%= sort === 'asc' ? 'selected' : '' %>>Oldest to Newest</option>
          </select>
        </form>
      </div>
    </div>

    <% let years = {}; %>
    <% posts.forEach(post => { %>
      <% const year = new Date(post.createdAt).getFullYear(); %>
      <% if (!years[year]) years[year] = []; %>
      <% years[year].push(post); %>
    <% }); %>

    <div id="noPostsMessage" style="display: none; text-align: center; padding: 20px; font-size: 18px; color: #555;">
      No posts found matching "<span id="searchTerm"></span>"
    </div>

    <% Object.keys(years).sort((a, b) => { %>
      <% return sort === 'asc' ? a - b : b - a; %>
    <% }).forEach((year, index) => { %>
      <div class="year-section" data-year="<%= year %>">
        <button class="collapsible <%= (index === 0 && !locals.dashboard) ? 'active' : '' %>"><%= year %> <span class="arrow">â–¼</span></button>
        <div class="content">
          <% years[year].forEach(post => { %>
            <div class="post-card" data-title="<%= post.title.toLowerCase() %>" data-author="<%= post.author.toLowerCase() %>">
              <img src="<%= post.imageUrl %>" alt="<%= post.title %>" class="post-img">
              <h3><%= post.title %></h3>
              <div class="post-card-content">
                <p><%= post.content %></p>
                <p><strong>Author:</strong> <%= post.author %></p>
                <p class="date-posted">Posted on: <%= new Date(post.createdAt).toLocaleString('en-PH', {
                  year: 'numeric',
                  month: 'long',
                  day: 'numeric',
                  hour: '2-digit',
                  minute: '2-digit',
                  timeZone: 'Asia/Manila'
                }) %></p>
              </div>
              <div class="post-actions">
                <a href="/edit-post/<%= post._id %>" class="edit-btn">Edit</a>
                <form action="/delete-post/<%= post._id %>" method="POST" class="delete-form" onsubmit="return confirmDelete(event)">
                  <button type="submit" class="delete-btn">Delete</button>
                </form>
              </div>
            </div>
          <% }) %>
        </div>
      </div>
    <% }) %>

  </main>

  
  <a href="#" class="back-to-top" id="backToTop">â†‘</a>

</div>

<script>
  document.addEventListener('DOMContentLoaded', function() {
    const IS_DASHBOARD_VIEW = <%- (typeof locals !== 'undefined' && locals.dashboard) ? 'true' : 'false' %>;

    // Handle collapsible sections
    const collapsibles = document.querySelectorAll('.collapsible');
    
    // Add confirmation function for delete buttons
    window.confirmDelete = function(event) {
      if (!confirm('Are you sure you want to delete this post? This action cannot be undone.')) {
        event.preventDefault();
        return false;
      }
      return true;
    };
    
    // Check authentication state (only if not in dashboard)
    if (!IS_DASHBOARD_VIEW) {
        function verifySession() {
          fetch('/api/check-session?t=' + new Date().getTime(), { 
            credentials: 'same-origin',
            headers: { 'Cache-Control': 'no-cache' }
          })
          .then(response => response.json())
          .then(data => {
            if (!data.authenticated) {
              console.log('Session invalid, redirecting to login');
              localStorage.removeItem('isLoggedIn');
              window.location.href = '/login?expired=true&redirect=' + encodeURIComponent(window.location.pathname);
            }
          })
          .catch(error => {
            console.error('Session check error:', error);
          });
        }
        verifySession();
        window.addEventListener('pageshow', function(event) {
          if (event.persisted || (window.performance && window.performance.navigation.type === 2)) {
            verifySession();
          }
        });
    }
    
    // Collapsible script (only if not in dashboard, or if dashboard needs it to hide sections other than first)
    if (!IS_DASHBOARD_VIEW) {
        collapsibles.forEach(function(button) {
          button.addEventListener('click', function() {
            this.classList.toggle('active');
            // CSS now handles the display of .content based on .collapsible.active
          });
        });
    } else {
        // In dashboard mode, all .content sections under .year-section are made visible by CSS.
        // Collapsible buttons are still present but won't toggle visibility via this script.
        // They will show year, and all posts underneath will be visible in grid.
    }

    // Dynamic search functionality
    const searchInput = document.getElementById('searchInput');
    const noPostsMessage = document.getElementById('noPostsMessage');
    const searchTermDisplay = document.getElementById('searchTerm');
    const yearSections = document.querySelectorAll('.year-section');
    
    if(searchInput) { // Ensure search input exists
        searchInput.addEventListener('input', function() {
          const query = this.value.trim().toLowerCase();
          let totalMatchingPosts = 0;
          if(searchTermDisplay) searchTermDisplay.textContent = query;
          
          yearSections.forEach(section => {
            const yearCollapsible = section.querySelector('.collapsible');
            const yearContent = section.querySelector('.content');
            let yearMatchCount = 0;
            
            const yearPosts = section.querySelectorAll('.post-card');
            
            yearPosts.forEach(post => {
              const title = post.getAttribute('data-title') || '';
              const author = post.getAttribute('data-author') || '';
              const postTextContent = (post.querySelector('.post-card-content p')?.textContent || '').toLowerCase();
              
              if (query === '' || 
                  title.includes(query) || 
                  author.includes(query) || 
                  postTextContent.includes(query)) {
                post.style.display = 'flex'; // Or 'block' if it's not a flex container by default in this context
                yearMatchCount++;
                totalMatchingPosts++;
              } else {
                post.style.display = 'none';
              }
            });
            
            if (query === '') { // If search is cleared
                section.style.display = 'block';
                if (yearCollapsible && !yearCollapsible.classList.contains('active') && !IS_DASHBOARD_VIEW) {
                   // If not in dashboard and section wasn't active, keep content hidden by CSS
                } else {
                   // yearContent.style.display = 'grid'; // Already handled by CSS if active or in dashboard
                }
            } else { // If there's a search query
                if (yearMatchCount === 0) {
                  section.style.display = 'none';
                } else {
                  section.style.display = 'block';
                  if (yearCollapsible && !yearCollapsible.classList.contains('active') && !IS_DASHBOARD_VIEW) {
                    yearCollapsible.classList.add('active'); // Expand section if it has matches and wasn't active
                  }
                   // yearContent.style.display = 'grid'; // Already handled by CSS
                }
            }
          });
          
          if (noPostsMessage) {
            if (totalMatchingPosts === 0 && query !== '') {
              noPostsMessage.style.display = 'block';
            } else {
              noPostsMessage.style.display = 'none';
            }
          }
        });
    }
  });
</script>
</body>

</html>
